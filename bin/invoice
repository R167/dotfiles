#!/usr/bin/env RBENV_VERSION=2.4.0 ruby
# frozen_string_literal: true

require 'json'
require 'open-uri'
require 'rest-client'
require 'ruby-progressbar'

TIMETRAP = "RBENV_VERSION=2.4.0 timetrap"

def timetrap(command)
  `#{TIMETRAP} #{command}`
end

puts "Will use following entries:"
lines = timetrap("display -f datesheet -r FORTExchange").split("\n")

lines.each_with_index do |l, i|
  puts "%2d | %s" % [i + 1, l[0, 120]]
end

dates = nil
print "Would you like to customize date range? (y/N) "
if gets.downcase.strip[0] == 'y'
  print "Enter start number: "
  start = gets.chomp.to_i
  print "Enter end number (or blank for auto): "
  stop = gets.chomp.to_i
  ending = " --end #{lines[stop - 1].split.first}" if (1..lines.length).include?(stop)
  dates = "--start #{lines[start - 1].split.first}#{ending}"
end

data = {
  apikey: ENV['CLOUDCONVERT_API_KEY'],
  converteroptions: {templating: JSON.parse(timetrap("display -f docxtemp #{dates} -r FORTExchange"))},
  download: false,
  input: 'upload',
  inputformat: 'docx',
  outputformat: 'pdf',
  save: true
}

json_params = data.to_json

class SpecialName < File
  attr_writer :original_filename

  def original_filename
    if defined?(@original_filename)
      @original_filename
    else
      self.class.basename(self.path)
    end
  end
end

puts "Getting permission..."
response = RestClient.post("https://api.cloudconvert.com/process", json_params, {content_type: :json, accept: :json})
response_body = JSON.parse(response.body)
process_url = "https:#{response_body['url']}"

puts "Uploading file..."
upload_file = SpecialName.new('/Users/wmd/Documents/invoice.docx')
upload_file.original_filename = Time.now.strftime("invoice_%Y-%m-%d_%H%M.docx")
status = JSON.parse(RestClient.post(process_url, {file: upload_file, json: json_params}, {accept: :json}).body)

puts "Waiting for convertsion"
progress = ProgressBar.create(title: status['message'], percent: status['percent'])
loop do
  status = JSON.parse(RestClient.get(process_url, {accept: :json}).body)
  progress.title = status['message']
  progress.progress = status['percent']
  break if ['finished', 'error'].include? status['step']
  sleep(1)
end

filename = Time.now.strftime("/Users/wmd/tmp/invoices/invoice_%Y-%m-%d_%H%M.pdf")
puts "Downloading..."

IO.copy_stream(open("https:#{status['output']['url']}"), filename)

puts "Saved to #{filename}"

print "Open folder? (Y/n) "
system("open -a Finder '/Users/wmd/tmp/invoices'") unless gets.chomp.lstrip.downcase[0] == 'n'
